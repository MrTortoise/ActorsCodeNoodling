// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Entities.Model.Producers
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Mine")]
    public partial class MineFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Mine.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Mine", "\tIn order to be able to distribute my seed\r\n\tAs a mine\r\n\tI want to be able to pro" +
                    "duce a resource, let other actors query what i produce and how much of it i have" +
                    ".", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a Mine that produces a resource and query what resource it produces.")]
        public virtual void CreateAMineThatProducesAResourceAndQueryWhatResourceItProduces_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a Mine that produces a resource and query what resource it produces.", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConsumerType",
                        "Name",
                        "Quantity",
                        "TimePeriodType",
                        "TimePeriodQuantity"});
            table1.AddRow(new string[] {
                        "Produce",
                        "metal",
                        "10",
                        "Second",
                        "5"});
#line 8
 testRunner.When("I have created a producer called \"testMine\" that produces the following resources" +
                    "", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConsumerType",
                        "Name",
                        "Quantity",
                        "TimePeriodType",
                        "TimePeriodQuantity"});
            table2.AddRow(new string[] {
                        "Produce",
                        "metal",
                        "10",
                        "Second",
                        "5"});
#line 11
 testRunner.Then("I expect the producer called \"testMine\" produces the following resources", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a mine, wait for a time period\tand confirm it has produced what is expecte" +
            "d")]
        public virtual void CreateAMineWaitForATimePeriodAndConfirmItHasProducedWhatIsExpected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a mine, wait for a time period\tand confirm it has produced what is expecte" +
                    "d", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ConsumerType",
                        "Name",
                        "Quantity",
                        "TimePeriodType",
                        "TimePeriodQuantity"});
            table3.AddRow(new string[] {
                        "Produce",
                        "metal",
                        "10",
                        "Second",
                        "5"});
#line 16
 testRunner.Given("I have created a producer called \"testMine\" that produces the following resources" +
                    "", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "TimePeriodType",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "Second",
                        "12"});
#line 19
 testRunner.When("I wait for the following time period", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Quantity"});
            table5.AddRow(new string[] {
                        "Metal",
                        "20"});
#line 22
 testRunner.Then("I expect the producer called \"testMine\" to have the following resources available" +
                    "", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
