// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Entities.Model.ContractActors
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ExchangeContractFeature")]
    public partial class ExchangeContractFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExchangeContractFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ExchangeContractFeature", "In order to setup a contract to exchange goods at a given location\r\nAs a trader\r\n" +
                    "I want to be able to post Exchange contracts and negotiate terms", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
   testRunner.Given("I create a test actor system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1.AddRow(new string[] {
                        "metal"});
            table1.AddRow(new string[] {
                        "rock"});
#line 8
   testRunner.Given("I add the following resources to the Resource Manager", ((string)(null)), table1, "Given ");
#line 12
   testRunner.And("I have created a Trader called \"seller\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
   testRunner.And("I have created a Trader called \"buyer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
   testRunner.And("I create a TestProbe called \"buyer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
   testRunner.And("I create a TestProbe called \"seller\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
   testRunner.And("I create a TestProbe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
   testRunner.And("I have configured the DateTime provider to return \"2015/1/1 15:00:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get an instance of ExchangeContractActor and verify it is uninitialised")]
        public virtual void GetAnInstanceOfExchangeContractActorAndVerifyItIsUninitialised()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get an instance of ExchangeContractActor and verify it is uninitialised", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 21
 testRunner.When("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"Uniniti" +
                    "alised\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post invitation to Exchange contract, verify its current state is posted and that" +
            " it can be queried")]
        public virtual void PostInvitationToExchangeContractVerifyItsCurrentStateIsPostedAndThatItCanBeQueried()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post invitation to Exchange contract, verify its current state is posted and that" +
                    " it can be queried", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 25
 testRunner.Given("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table2.AddRow(new string[] {
                        "SellResourceName",
                        "metal"});
            table2.AddRow(new string[] {
                        "SellResourceQuantity",
                        "10"});
            table2.AddRow(new string[] {
                        "SellResourceTimePeriod",
                        "Hour"});
            table2.AddRow(new string[] {
                        "SellResourceTimePeriodQuantity",
                        "1"});
            table2.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table2.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table2.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table2.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
            table2.AddRow(new string[] {
                        "ContractOwner",
                        "seller"});
#line 26
 testRunner.When("I post to the ExchangeContract \"exchangeContract\" the following invitation", ((string)(null)), table2, "When ");
#line 38
 testRunner.Then("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"Invitat" +
                    "ionPosted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 39
    testRunner.And("I expect the creator of ExchangeContractActor \"exchangeContract\" to be \"seller\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table3.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table3.AddRow(new string[] {
                        "Quantity",
                        "10"});
            table3.AddRow(new string[] {
                        "CompletionTime",
                        "2015/1/1 16:00:00"});
            table3.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table3.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table3.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table3.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
#line 40
    testRunner.And("I expect the ExchangeContractActor \"exchangeContract\" to have the following for o" +
                    "ffer", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take an invitation and make an offer, verify state is OfferMade, offer is queryab" +
            "le, and owner gets notified")]
        public virtual void TakeAnInvitationAndMakeAnOfferVerifyStateIsOfferMadeOfferIsQueryableAndOwnerGetsNotified()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take an invitation and make an offer, verify state is OfferMade, offer is queryab" +
                    "le, and owner gets notified", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 52
 testRunner.Given("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table4.AddRow(new string[] {
                        "SellResourceName",
                        "metal"});
            table4.AddRow(new string[] {
                        "SellResourceQuantity",
                        "10"});
            table4.AddRow(new string[] {
                        "SellResourceTimePeriod",
                        "Hour"});
            table4.AddRow(new string[] {
                        "SellResourceTimePeriodQuantity",
                        "1"});
            table4.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table4.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table4.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table4.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
            table4.AddRow(new string[] {
                        "ContractOwner",
                        "testActor"});
#line 53
 testRunner.And("I post to the ExchangeContract \"exchangeContract\" the following invitation", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table5.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table5.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table5.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 65
    testRunner.When("the Trader called \"buyer\" makes the following offer on the ExchangeContractActor " +
                    "called \"exchangeContract\"", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table6.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table6.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table6.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
            table6.AddRow(new string[] {
                        "SenderName",
                        "buyer"});
#line 71
    testRunner.Then("I expect that the TestActor will of been notified of the following offer being ma" +
                    "de", ((string)(null)), table6, "Then ");
#line 78
    testRunner.Then("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"OfferRe" +
                    "cieved\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table7.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table7.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table7.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
            table7.AddRow(new string[] {
                        "SenderName",
                        "buyer"});
#line 79
    testRunner.And("I expect an offer on the ExchangeContractActor called \"exchangeContract\" to be", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take an invitation that is under offer, reject it, ensure owner gets liability ba" +
            "ck and supervisor of offer notified.")]
        public virtual void TakeAnInvitationThatIsUnderOfferRejectItEnsureOwnerGetsLiabilityBackAndSupervisorOfOfferNotified_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take an invitation that is under offer, reject it, ensure owner gets liability ba" +
                    "ck and supervisor of offer notified.", ((string[])(null)));
#line 87
   this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 88
 testRunner.Given("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table8.AddRow(new string[] {
                        "SellResourceName",
                        "metal"});
            table8.AddRow(new string[] {
                        "SellResourceQuantity",
                        "10"});
            table8.AddRow(new string[] {
                        "SellResourceTimePeriod",
                        "Hour"});
            table8.AddRow(new string[] {
                        "SellResourceTimePeriodQuantity",
                        "1"});
            table8.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table8.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table8.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table8.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
            table8.AddRow(new string[] {
                        "ContractOwner",
                        "seller"});
#line 89
 testRunner.And("I post to the ExchangeContract \"exchangeContract\" the following invitation using " +
                    "a TestProbe", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table9.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table9.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table9.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 101
   testRunner.And("the TestProbe called \"buyer\" makes the following offer on the ExchangeContractAct" +
                    "or called \"exchangeContract\"", ((string)(null)), table9, "And ");
#line 107
   testRunner.When("the TestProbe called \"seller\" rejects the offer on the ExchangeContractActor call" +
                    "ed \"exchangeContract\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
   testRunner.Then("I expect the TestProbe \"exchangeContractSup\" to of recieved the message Offer Rej" +
                    "ected Notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
   testRunner.And("I expect that the TestProbe \"buyer\" will of recieved an empty Offer Rejected Mess" +
                    "age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table10.AddRow(new string[] {
                        "Quantity",
                        "2"});
#line 110
   testRunner.And("I expect the TestProbe \"seller\" to recieve the following Liability Message", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table11.AddRow(new string[] {
                        "Quantity",
                        "1"});
#line 114
   testRunner.And("I expect the TestProbe \"buyer\" to recieve the following Liability Message", ((string)(null)), table11, "And ");
#line 118
   testRunner.And("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"OfferRe" +
                    "jected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take an invitation that is under offer, reject it and make an alternate suggestio" +
            "n")]
        public virtual void TakeAnInvitationThatIsUnderOfferRejectItAndMakeAnAlternateSuggestion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take an invitation that is under offer, reject it and make an alternate suggestio" +
                    "n", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 121
 testRunner.Given("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table12.AddRow(new string[] {
                        "SellResourceName",
                        "metal"});
            table12.AddRow(new string[] {
                        "SellResourceQuantity",
                        "10"});
            table12.AddRow(new string[] {
                        "SellResourceTimePeriod",
                        "Hour"});
            table12.AddRow(new string[] {
                        "SellResourceTimePeriodQuantity",
                        "1"});
            table12.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table12.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table12.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table12.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
            table12.AddRow(new string[] {
                        "ContractOwner",
                        "seller"});
#line 122
 testRunner.And("I post to the ExchangeContract \"exchangeContract\" the following invitation using " +
                    "a TestProbe", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table13.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table13.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table13.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 134
   testRunner.And("the TestProbe called \"buyer\" makes the following offer on the ExchangeContractAct" +
                    "or called \"exchangeContract\"", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table14.AddRow(new string[] {
                        "Quantity",
                        "10"});
            table14.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table14.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 140
   testRunner.When("the TestProbe called \"seller\" rejects the offer on the ExchangeContractActor call" +
                    "ed \"exchangeContract\" and makes the following suggested offer", ((string)(null)), table14, "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table15.AddRow(new string[] {
                        "Quantity",
                        "10"});
            table15.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table15.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 146
   testRunner.Then("I expect that the TestProbe \"buyer\" will of recieved the following suggested offe" +
                    "r", ((string)(null)), table15, "Then ");
#line 152
   testRunner.And("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"Counter" +
                    "Offered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Take an invitation that is under offer, accept it. Need to start escrow.")]
        public virtual void TakeAnInvitationThatIsUnderOfferAcceptIt_NeedToStartEscrow_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take an invitation that is under offer, accept it. Need to start escrow.", ((string[])(null)));
#line 154
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 155
 testRunner.Given("I create an ExchangeContractActor called \"exchangeContract\" with supervisor TestP" +
                    "robe called \"exchangeContractSup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table16.AddRow(new string[] {
                        "ExchangeType",
                        "Purchase"});
            table16.AddRow(new string[] {
                        "SellResourceName",
                        "metal"});
            table16.AddRow(new string[] {
                        "SellResourceQuantity",
                        "10"});
            table16.AddRow(new string[] {
                        "SellResourceTimePeriod",
                        "Hour"});
            table16.AddRow(new string[] {
                        "SellResourceTimePeriodQuantity",
                        "1"});
            table16.AddRow(new string[] {
                        "SuggestedOfferResourceName",
                        "rock"});
            table16.AddRow(new string[] {
                        "SuggestedOfferResourceQuantity",
                        "2"});
            table16.AddRow(new string[] {
                        "LiabilityResourceName",
                        "metal"});
            table16.AddRow(new string[] {
                        "LiabilityResourceQuantity",
                        "2"});
            table16.AddRow(new string[] {
                        "ContractOwner",
                        "seller"});
#line 156
 testRunner.And("I post to the ExchangeContract \"exchangeContract\" the following invitation using " +
                    "a TestProbe", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table17.AddRow(new string[] {
                        "Resource",
                        "metal"});
            table17.AddRow(new string[] {
                        "Quantity",
                        "8"});
            table17.AddRow(new string[] {
                        "LiabilityResource",
                        "metal"});
            table17.AddRow(new string[] {
                        "LiabilityQuantity",
                        "1"});
#line 168
   testRunner.And("the TestProbe called \"buyer\" makes the following offer on the ExchangeContractAct" +
                    "or called \"exchangeContract\"", ((string)(null)), table17, "And ");
#line 174
   testRunner.When("the TestProbe called \"seller\" rejects the offer on the ExchangeContractActor call" +
                    "ed \"exchangeContract\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
   testRunner.Then("I expect the state of the ExchangeContractActor \"exchangeContract\" to be \"OfferAc" +
                    "cepted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
