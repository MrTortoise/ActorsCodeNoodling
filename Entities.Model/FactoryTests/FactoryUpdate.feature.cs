// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Entities.Model.FactoryTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FactoryUpdate")]
    public partial class FactoryUpdateFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FactoryUpdate.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FactoryUpdate", "In order to produce resources\r\nAs a Factory\r\nI want to be able to update and prod" +
                    "uce stuff", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
 #line 7
 testRunner.Given("I create a test actor system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1.AddRow(new string[] {
                        "Metal"});
            table1.AddRow(new string[] {
                        "Rock"});
            table1.AddRow(new string[] {
                        "Punk"});
            table1.AddRow(new string[] {
                        "Hydrogen"});
            table1.AddRow(new string[] {
                        "geddit yet?"});
#line 8
 testRunner.And("I add the following resources to the Resource Manager", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table2.AddRow(new string[] {
                        "Metal",
                        "0.1"});
            table2.AddRow(new string[] {
                        "Rock",
                        "0.9"});
#line 15
 testRunner.And("I have created the following Material called \"The Moon\"", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table3.AddRow(new string[] {
                        "Metal",
                        "0.1"});
            table3.AddRow(new string[] {
                        "Rock",
                        "0.9"});
#line 19
 testRunner.And("I have created the following Material called \"Some Planet\"", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table4.AddRow(new string[] {
                        "Hydrogen",
                        "0.1"});
#line 23
 testRunner.And("I have created the following Material called \"Mellow Yellow\"", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "radius",
                        "orbitDistance",
                        "orbitalAngularVelocity",
                        "rotatationalAngularVelocity",
                        "initialOrbitalAngularPositionOffset",
                        "currentAngularPosition",
                        "bodyType",
                        "material",
                        "satellites"});
            table5.AddRow(new string[] {
                        "The Moon",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Moon",
                        "The Moon",
                        ""});
            table5.AddRow(new string[] {
                        "Another Moon",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Moon",
                        "The Moon",
                        ""});
            table5.AddRow(new string[] {
                        "The Planet",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Planet",
                        "Some Planet",
                        "\"The Moon\",\"Another Moon\""});
            table5.AddRow(new string[] {
                        "Other Planet",
                        "10",
                        "300",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Planet",
                        "Some Planet",
                        ""});
            table5.AddRow(new string[] {
                        "The Sun",
                        "1",
                        "2",
                        "0.2",
                        "0",
                        "0",
                        "0",
                        "Star",
                        "Mellow Yellow",
                        ""});
            table5.AddRow(new string[] {
                        "The Second Sun",
                        "1",
                        "2",
                        "0.2",
                        "0",
                        "3.14",
                        "3.14",
                        "Star",
                        "Mellow Yellow",
                        ""});
#line 26
 testRunner.And("I have created the following Celestial Bodies", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "stars",
                        "planets"});
            table6.AddRow(new string[] {
                        "Solar System",
                        "\"The Sun\",\"The Second Sun\"",
                        "\"The Planet\",\"Other Planet\""});
#line 34
 testRunner.And("I send messages of type CreateCenterOfMass to actor CenterOfMassManagerActor with" +
                    " arguments", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "In",
                        "resource",
                        "quantity",
                        "periods"});
            table7.AddRow(new string[] {
                        "false",
                        "Metal",
                        "10",
                        "1"});
#line 37
 testRunner.And("I have created a Factory Type called \"FuckPhysics\" with the following properties", ((string)(null)), table7, "And ");
#line 40
 testRunner.And("I have created a Trader called \"factoryCreator\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Capacity",
                        "CargoSize"});
            table8.AddRow(new string[] {
                        "smallFactoryInventory",
                        "1000",
                        "Small"});
#line 41
 testRunner.And("I have created the following inventory types", ((string)(null)), table8, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setup a dummy actor, register with FactoryCoordinator can assert that updates are" +
            " called when expected")]
        public virtual void SetupADummyActorRegisterWithFactoryCoordinatorCanAssertThatUpdatesAreCalledWhenExpected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setup a dummy actor, register with FactoryCoordinator can assert that updates are" +
                    " called when expected", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 6
 this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "factoryType",
                        "centerOfMass",
                        "celestialBody",
                        "inventoryType"});
            table9.AddRow(new string[] {
                        "somethingFromNothingFactory",
                        "FuckPhysics",
                        "Solar System",
                        "Other Planet",
                        "smallFactoryInventory"});
#line 46
 testRunner.Given("I create the following Factories using actor \"factoryCreator\"", ((string)(null)), table9, "Given ");
#line 49
 testRunner.When("I wait for 3 FactoryCoordinator time periods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table10.AddRow(new string[] {
                        "Metal",
                        "30"});
#line 50
 testRunner.Then("I expect the factory \"somethingFromNothingFactory\" to have the following resource" +
                    "s", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
