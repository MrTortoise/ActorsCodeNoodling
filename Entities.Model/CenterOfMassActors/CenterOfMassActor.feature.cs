// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Entities.Model.CenterOfMassActors
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CenterOfMassActor")]
    public partial class CenterOfMassActorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CenterOfMassActor.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CenterOfMassActor", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
#line 15
testRunner.Given("I create a test actor system using config", "akka { \r\n   loglevel=DEBUG,  loggers=[\"Akka.Logger.Serilog.SerilogLogger, Akka.Lo" +
                    "gger.Serilog\"]\r\n      persistence {\r\n                       publish-plugin-comma" +
                    "nds = on\r\n                       journal {\r\n                           plugin = " +
                    "\"akka.persistence.journal.sql-server\"\r\n                           sql-server {\r\n" +
                    "                               class = \"Akka.Persistence.SqlServer.Journal.SqlSe" +
                    "rverJournal, Akka.Persistence.SqlServer\"\r\n                               plugin-" +
                    "dispatcher = \"akka.actor.default-dispatcher\"\r\n                               tab" +
                    "le-name = EventJournal\r\n                               schema-name = dbo\r\n      " +
                    "                         auto-initialize = on\r\n                               co" +
                    "nnection-string = \"Data Source=localhost\\\\SQLEXPRESS;Database=AkkaPersistenceTes" +
                    "t;User Id=akkadotnet;Password=akkadotnet;\"\r\n                           }\r\n      " +
                    "                 }\r\n                       snapshot-store {\r\n                   " +
                    "        plugin = \"akka.persistence.snapshot-store.sql-server\"\r\n                 " +
                    "          sql-server {\r\n                               class = \"Akka.Persistence" +
                    ".SqlServer.Snapshot.SqlServerSnapshotStore, Akka.Persistence.SqlServer\"\r\n       " +
                    "                        plugin-dispatcher = \"akka.actor.default-dispatcher\"\r\n   " +
                    "                            table-name = SnapshotStore\r\n                        " +
                    "       schema-name = dbo\r\n                               auto-initialize = on\r\n " +
                    "                              connection-string = \"Data Source=localhost\\\\SQLEXP" +
                    "RESS;Database=AkkaPersistenceTest;User Id=akkadotnet;Password=akkadotnet;\"\r\n    " +
                    "                       }\r\n                       }\r\n                   }\r\n\t}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 46
 testRunner.And("I create a Resource Manager", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table1.AddRow(new string[] {
                        "metal"});
            table1.AddRow(new string[] {
                        "rock"});
            table1.AddRow(new string[] {
                        "punk"});
            table1.AddRow(new string[] {
                        "geddit yet?"});
#line 47
 testRunner.And("I add the following resources to the Resource Manager", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table2.AddRow(new string[] {
                        "Metal",
                        "0.1"});
            table2.AddRow(new string[] {
                        "Rock",
                        "0.9"});
#line 53
 testRunner.And("I have created the following Moon Type called \"The Moon\"", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "radius",
                        "orbitDistance",
                        "orbitalAngularVelocity",
                        "rotatationalAngularVelocity",
                        "initialOrbitalAngularPositionOffset",
                        "currentAngularPosition",
                        "moonType"});
            table3.AddRow(new string[] {
                        "The Moon",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "The Moon"});
            table3.AddRow(new string[] {
                        "Another Moon",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "The Moon"});
#line 57
 testRunner.And("I have created the following moons", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResourceName",
                        "Value"});
            table4.AddRow(new string[] {
                        "Metal",
                        "0.1"});
            table4.AddRow(new string[] {
                        "Rock",
                        "0.9"});
#line 61
 testRunner.And("I have created the following Planet Type called \"Some Planet\"", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "radius",
                        "orbitDistance",
                        "orbitalAngularVelocity",
                        "rotatationalAngularVelocity",
                        "initialOrbitalAngularPositionOffset",
                        "currentAngularPosition",
                        "planetType",
                        "moons"});
            table5.AddRow(new string[] {
                        "The Planet",
                        "10",
                        "100",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Some Planet",
                        "\"The Moon\",\"Another Moon\""});
            table5.AddRow(new string[] {
                        "Other Planet",
                        "10",
                        "300",
                        "0.1",
                        "0",
                        "0",
                        "0",
                        "Some Planet",
                        ""});
#line 65
 testRunner.And("I have created the following planets", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "property",
                        "Value"});
            table6.AddRow(new string[] {
                        "fuelRate",
                        "0.1"});
#line 69
 testRunner.And("I have created the following Star Type called \"Mellow Yellow\"", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "radius",
                        "orbitDistance",
                        "orbitalAngularVelocity",
                        "rotatationalAngularVelocity",
                        "initialOrbitalAngularPositionOffset",
                        "currentAngularPosition",
                        "starType"});
            table7.AddRow(new string[] {
                        "The Sun",
                        "1",
                        "2",
                        "0.2",
                        "0",
                        "0",
                        "0",
                        "Mellow Yellow"});
            table7.AddRow(new string[] {
                        "The Second Sun",
                        "1",
                        "2",
                        "0.2",
                        "0",
                        "3.14",
                        "3.14",
                        "Mellow Yellow"});
#line 72
 testRunner.And("I have created the following stars", ((string)(null)), table7, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a center of mass actor, add a com with stars and planets etc and verify th" +
            "ey exist")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void CreateACenterOfMassActorAddAComWithStarsAndPlanetsEtcAndVerifyTheyExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a center of mass actor, add a com with stars and planets etc and verify th" +
                    "ey exist", new string[] {
                        "mytag"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 80
 testRunner.Given("I create a CenterOfMassManagerActor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "name",
                        "stars",
                        "planets"});
            table8.AddRow(new string[] {
                        "Solar System",
                        "\"The Sun\",\"The Second Sun\"",
                        "\"The Planet\",\"Other Planet\""});
#line 81
 testRunner.When("I send messages of type CreateCenterOfMass to actor CenterOfMassManagerActor with" +
                    " arguments", ((string)(null)), table8, "When ");
#line 84
 testRunner.Then("the result should be 120 on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
